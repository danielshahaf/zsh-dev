#!/usr/bin/env zsh

## Global declarations
readonly AUTHOR_NAME="$(git config --get user.name)"
readonly UPSTREAM=origin/master
local ENDPOINT
readonly NAME=$0:t
export seqno

fail() { echo "${NAME}: $1" >&2; exit 1 }

usage() {
  cat >&2 <<EOF
$NAME: a zsh developer's add-X-Seq-and-ChangeLog script

Usage: $NAME NUMBER

Will prefix NUMBER to the log message of each local commit not yet
in $UPSTREAM, and amend the commit with a ChangeLog entry.  NUMBER may
be '42', 'users/42', 'unposted', or 'foo_' (arbitrary text followed by an
underscore, which will be stripped).

Prerequisite: git must have been compiled with PCRE support.
EOF
  exit ${1:-1}
}

## Require a recent zsh
if [[ $( (){ shift -p; echo $# } arg1 arg2 arg3 ) -ne 2 ]]; then
  fail "This script requires a zsh supporting 'shift -p'"
fi

## Argument parsing
if [[ $# -eq 1 ]] &&
   [[ $(git log -1 --pretty=%cn) == *"${AUTHOR_NAME}"* ]] &&
   true
then
  if [[ $1 == *_ ]]; then
    seqno=${1%?}
  elif [[ $1 == (<30000->*|users/<->|unposted*) ]]; then
    seqno=$1
  else
    usage
  fi
else
  usage
fi
[[ -n $seqno ]] || usage

## Validate worktree state
if [[ -n "`git status --porcelain ChangeLog`" ]]; then
  fail "ChangeLog has local mods"
fi

if ! git merge-base --is-ancestor $UPSTREAM HEAD; then
  fail "${(q-)UPSTREAM} must be an ancestor of HEAD, but isn't"
fi

## Set ENDPOINT to oldest commit such that $ENDPOINT..HEAD consists of commits
## by $AUTHOR_NAME that don't touch ChangeLog.

# Helper function. Validates that the commit $1 is to be operated on by this script.
# If trouble, return non-zero and set $REPLY to an error message.
commit_is_to_be_stamped() {
  local -ar files_changed=( ${(0)"$(git diff --name-only -z "${1}^..${1}" --)"} ) 
  if (( ${+files_changed[(r)ChangeLog]} )); then
    REPLY="touches ChangeLog"
    return 1
  fi
  if [[ $(git log -1 --pretty=%cn) != *"${AUTHOR_NAME}"* ]]; then
    REPLY="not authored by ${(qq)AUTHOR_NAME}"
    return 2
  fi
  if ! git merge-base --is-ancestor "$UPSTREAM" "$1"; then
    REPLY="is not a descendant of ${(q-)UPSTREAM}"
    return 3
  fi
  return 0
}
commit_is_to_be_stamped HEAD || fail "HEAD doesn't seem like it's a patch of mine ($REPLY)"
() {
  ENDPOINT=HEAD
  while commit_is_to_be_stamped "${ENDPOINT}^"; do
    ENDPOINT="${ENDPOINT}^"
  done
}

## Main body
seqno=$seqno \
  GIT_EDITOR='true' git rebase -i $ENDPOINT^ --exec \
    "$0-internal"
